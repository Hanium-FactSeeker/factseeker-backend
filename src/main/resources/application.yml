#spring:
#  datasource:
#    url: jdbc:h2:mem:testdb
#    driver-class-name: org.h2.Driver
#    username: factseeker
#    password:
#  jpa:
#    hibernate:
#      ddl-auto: none
#    defer-datasource-initialization: true
app:
  mail:
    from: ${spring.mail.username}

#프론트 리디렉션 주소 (임시 작성)
oauth2:
  authorized-redirect-uris: http://localhost:3000

spring:
  data:
    redis:
      host: localhost
      port: 6379
      password: 1234
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1
  app:
    redis:
      cache:
        database: 1

  datasource:
    url: jdbc:mysql://localhost:3307/userdb
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: user
    password: 1234
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${spring.mail.username}
    password: ${spring.mail.password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope: name, email, phone_number
            redirect-uri: http://localhost:8080/oauth2/callback/naver
            authorization-grant-type: authorization_code
            client-name: Naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            scope: profile_nickname
            redirect-uri: http://localhost:8080/oauth2/callback/kakao
            authorization-grant-type: authorization_code
            client-name: Kakao
            client-authentication-method: client_secret_post

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.MySQLDialect

  output:
    ansi:
      enabled: always

jwt:
  secret: ${JWT_SECRET_KEY}
  access-token-expiration-milliseconds: 900000 # 15분
  refresh-token-expiration-milliseconds: 604800000 # 7일

youtube:
  api:
    key: ${YOUTUBE_API_KEY}

fastapi:
  base-url: http://${EC2_IP}:8000

# LLM API Configuration
llm:
  openai:
    api-key: ${OPENAI_API_KEY}
    model: gpt-4o
    max-tokens: 2000
    temperature: 0.7
  gemini:
    api-key: ${GOOGLE_GEMINI_API_KEY}
    model: gemini-1.5-flash
    max-tokens: 2000
    temperature: 0.7
#logging:
#  level:
#    org:
#      springframework:
#        security: DEBUG
#      apache:
#        http:
#          headers: DEBUG
#          client: DEBUG

# Swagger/OpenAPI 설정
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  packages-to-scan: com.factseekerbackend
  paths-to-match: /api/**
